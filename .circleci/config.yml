orbs:
  aws-ecr: circleci/aws-ecr@6.12.2
version: 2.1
jobs:
  compile_protos:
    docker:
      - image: couchers/grpc
    steps:
      - checkout
      - run: cd app && ./generate_protos.sh
      - persist_to_workspace:
          root: .
          paths:
            - "*"
  build_proxy:
    machine: true
    steps:
      - attach_workspace:
          at: .
      - run:
          command: |
            cd app/proxy
            docker build -t couchers/proxy -t $AWS_ECR_ACCOUNT_URL/couchers/proxy .
      - run: docker save -o couchers-proxy.tar.gz couchers/proxy
      - persist_to_workspace:
          root: .
          paths:
            - "*"
  deploy_proxy:
    machine: true
    steps:
      - attach_workspace:
          at: .
      - run: docker load -i couchers-proxy.tar.gz
      - aws-ecr/ecr-login
      - aws-ecr/push-image:
          repo: couchers/proxy
  # build_backend:
  #   machine: true
  #   steps:
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         command: |
  #           cd app/backend
  #           docker build -t couchers/backend -t $COUCHERS_ECR_URI/backend .
  #     - run: docker save -o couchers-backend.tar.gz couchers/backend
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - "*"
  # test_backend:
  #   machine: true
  #   steps:
  #     - attach_workspace:
  #         at: .
  #     - run: docker load -i couchers-backend.tar.gz
  #     - run: mkdir test-results
  #     - run: docker run couchers/backend pytest src --junitxml=test-results/junit.xml
  #     - store_test_results:
  #         path: test-results
  #     - store_artifacts:
  #         path: test-results
  # deploy_backend:
  #   machine: true
  #   steps:
  #     - attach_workspace:
  #         at: .
  #     - run: docker load -i couchers-backend.tar.gz
  #     - ecr-login
  #     - push-image:
  #         repo: couchers/backend
  # build_media:
  #   machine: true
  #   steps:
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         command: |
  #           cd app/media
  #           docker build -t couchers/media -t $COUCHERS_ECR_URI/media .
  #     - run: docker save -o couchers-media.tar.gz couchers/media
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - "*"
  # test_media:
  #   machine: true
  #   steps:
  #     - attach_workspace:
  #         at: .
  #     - run: docker load -i couchers-media.tar.gz
  #     - run: mkdir test-results
  #     - run: docker run -e "MEDIA_SERVER_FROM_ENV=0" couchers/media pytest src --junitxml=test-results/junit.xml
  #     - store_test_results:
  #         path: test-results
  #     - store_artifacts:
  #         path: test-results
  # deploy_media:
  #   machine: true
  #   steps:
  #     - attach_workspace:
  #         at: .
  #     - run: docker load -i couchers-media.tar.gz
  #     - ecr-login
  #     - push-image:
  #         repo: couchers/media
  # build_frontend:
  #   machine: true
  #   steps:
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         command: |
  #           cd app/frontend
  #           docker build -t couchers/frontend -t $COUCHERS_ECR_URI/frontend .
  #     - run: docker save -o couchers-frontend.tar.gz couchers/frontend
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - "*"
  # deploy_frontend:
  #   machine: true
  #   steps:
  #     - attach_workspace:
  #         at: .
  #     - run: docker load -i couchers-frontend.tar.gz
  #     - ecr-login
  #     - push-image:
  #         repo: couchers/frontend
workflows:
  version: 2
  proxy:
    jobs:
      - compile_protos
      - build_proxy:
          requires:
            - compile_protos
      - deploy_proxy:
          requires:
            - build_proxy
          # filters:
          #   branches:
          #     only: develop
  # backend:
  #   jobs:
  #     - compile_protos
  #     - build_backend:
  #         requires:
  #           - compile_protos
  #     - test_backend:
  #         requires:
  #           - build_backend
  #     - deploy_backend:
  #         requires:
  #           - build_backend
  #         filters:
  #           branches:
  #             only: develop
  # media:
  #   jobs:
  #     - compile_protos
  #     - build_media:
  #         requires:
  #           - compile_protos
  #     - test_media:
  #         requires:
  #           - build_media
  #     - deploy_media:
  #         requires:
  #           - build_media
  #         filters:
  #           branches:
  #             only: develop
  # frontend:
  #   jobs:
  #     - compile_protos
  #     - build_frontend:
  #         requires:
  #           - compile_protos
  #     - deploy_frontend:
  #         requires:
  #           - build_frontend
  #         filters:
  #           branches:
  #             only: develop
