syntax = "proto3";

package org.couchers.api.requests;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

import "pb/conversations.proto";

service Requests {
  rpc CreateHostRequest(CreateHostRequestReq) returns (CreateHostRequestRes);
  
  // Change the status of a host request.
  // Throws NOT_FOUND if you don't have a host request of that id, NOT_AUTHORIZED
  // if you try to change the status to one you aren't allowed.
  rpc RespondHostRequest(RespondHostRequestReq) returns (google.protobuf.Empty);
  
  rpc ListHostRequests(ListHostRequestsReq) returns (ListHostRequestsRes);
  
  rpc ListSentHostRequests(ListSentHostRequestsReq) returns (ListSentHostRequestsRes);
}

message CreateHostRequestReq {
  uint64 user_id = 1;
  google.protobuf.Timestamp from_date = 2;
  google.protobuf.Timestamp to_date = 3;
  string text = 4;
}

enum HostRequestStatus {
  HOST_REQUEST_STATUS_PENDING = 0;
  HOST_REQUEST_STATUS_ACCEPTED = 1;
  HOST_REQUEST_STATUS_REJECTED = 2;
  HOST_REQUEST_STATUS_CONFIRMED = 3;
  HOST_REQUEST_STATUS_CANCELLED = 4;
}

message HostRequest {
  uint64 host_request_id = 1;
  uint64 from_user_id = 2;
  uint64 to_user_id = 3;
  HostRequestStatus status = 4;
  google.protobuf.Timestamp created = 5;
  google.protobuf.Timestamp from_date = 6;
  google.protobuf.Timestamp to_date = 7;
  org.couchers.api.conversations.Message latest_message = 8;
  uint64 converstaion_id = 9;
}

message CreateHostRequestRes {
  HostRequest host_request = 1;
}

message RespondHostRequestReq {
  uint64 host_request_id = 1;
  HostRequestStatus status = 2;
}

message ListHostRequestsReq {
  // Whether to only show pending, accepted and
  // confirmed requests which haven't passed the
  // end date.
  bool only_active = 1;
}

message ListHostRequestsRes {
  repeated HostRequest host_requests = 1;
}


message ListSentHostRequestsReq {
  // Whether to only show pending, accepted and
  // confirmed requests which haven't passed the
  // end date.
  bool only_active = 1;
}

message ListSentHostRequestsRes {
  repeated HostRequest host_requests = 1;
}
