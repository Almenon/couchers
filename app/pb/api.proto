syntax = "proto3";

package org.couchers.api.core;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

service API {
  rpc Ping(PingReq) returns (PingRes) {
    // Pings the server for updates and basic user info
  }

  rpc GetUser(GetUserReq) returns (User) {
    // Get info about a particular user
  }

  rpc UpdateProfile(UpdateProfileReq) returns (UpdateProfileRes) {
    // Update your profile
  }

  rpc SendFriendRequest(SendFriendRequestReq) returns (google.protobuf.Empty);

  rpc ListFriendRequests(google.protobuf.Empty) returns (ListFriendRequestsRes);

  rpc ListFriends(google.protobuf.Empty) returns (ListFriendsRes);

  rpc RespondFriendRequest(RespondFriendRequestReq) returns (google.protobuf.Empty);

  rpc CancelFriendRequest(CancelFriendRequestReq) returns (google.protobuf.Empty);

  rpc Search(SearchReq) returns (SearchRes) {
    // Search for user names and usernames (for now)
  }
}

message SearchReq {
  string query = 1;
}

message SearchRes {
  repeated User users = 1;
}

message SendFriendRequestReq {
  string user = 1;
}

message FriendRequest {
  int64 friend_request_id = 1;

  enum FriendRequestStatus {
    // these are the only two states that a user will see
    PENDING = 0;
    ACCEPTED = 1;
  }

  FriendRequestStatus state = 2;

  string user = 3;
}

message RespondFriendRequestReq {
  int64 friend_request_id = 1;

  bool accept = 2;
}

message CancelFriendRequestReq {
  int64 friend_request_id = 1;
}

message ListFriendRequestsRes {
  repeated FriendRequest sent = 1;
  repeated FriendRequest received = 2;
}

message ListFriendsRes {
  repeated string users = 1;
}

message PingReq {}

message PingRes {
  // Basic info about user
  int64 user_id = 1;
  string username = 2;
  string name = 3;
  string color = 4;
}

message MutualFriend {
  int64 user_id = 1;
  string username = 2;
  string name = 3;
}

message User {
  enum FriendshipStatus {
    NOT_FRIENDS = 0;
    FRIENDS = 1;
    PENDING = 2;
    NA = 3; // not applicable, e.g. user requesting is self
  }

  uint64 id = 1;
  string username = 2;
  string name = 3;
  string city = 4;
  double verification = 5;
  double community_standing = 6;
  uint32 num_references = 7;
  string gender = 8;
  uint32 age = 9;
  string color = 10; // web color, e.g. #643073, case doesn't matter
  google.protobuf.Timestamp joined = 11; // not exact
  google.protobuf.Timestamp last_active = 12; // not exact
  string occupation = 13;
  string about_me = 14;
  string about_place = 15;
  repeated string languages = 16;
  repeated string countries_visited = 17;
  repeated string countries_lived = 18;

  FriendshipStatus friends = 19;
  repeated MutualFriend mutual_friends = 20;
}

message GetUserReq {
  string user = 1;
}

message RepeatedStringValue {
  // A RepeatedStringValue is like a "protobuf warpper" (like {Type}Value) but for repeated strings
  // allows us to determine if the user wanted to remote this list of strings
  bool exists = 1;
  repeated string value = 2;
}

message UpdateProfileReq {
  // These StringValue types allow us to determine if the value is absent versus ""

  google.protobuf.StringValue name = 1;
  google.protobuf.StringValue city = 2;
  google.protobuf.StringValue gender = 3;
  google.protobuf.StringValue occupation = 4;
  google.protobuf.StringValue about_me = 5;
  google.protobuf.StringValue about_place = 6;
  google.protobuf.StringValue color = 7;

  RepeatedStringValue languages = 8;
  RepeatedStringValue countries_visited = 9;
  RepeatedStringValue countries_lived = 10;
}

message UpdateProfileRes {
  bool updated_name = 1;
  bool updated_city = 2;
  bool updated_gender = 3;
  bool updated_occupation = 4;
  bool updated_about_me = 5;
  bool updated_about_place = 6;
  bool updated_color = 7;
  bool updated_languages = 8;
  bool updated_countries_visited = 9;
  bool updated_countries_lived = 10;
}
