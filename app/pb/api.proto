syntax = "proto3";

package api;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";

service API {
  rpc Ping(PingReq) returns (PingRes) {
    // Pings the server for updates and basic user info
  }

  rpc GetUser(GetUserReq) returns (User) {
    // Get info about a particular user
  }

  rpc UpdateProfile(UpdateProfileReq) returns (UpdateProfileRes) {
    // Update your profile
  }

  rpc SendFriendRequest(SendFriendRequestReq) returns (google.protobuf.Empty);

  rpc ListFriendRequests(google.protobuf.Empty) returns (ListFriendRequestsRes);

  rpc ListFriends(google.protobuf.Empty) returns (ListFriendsRes);

  rpc RespondFriendRequest(RespondFriendRequestReq) returns (google.protobuf.Empty);

  rpc CancelFriendRequest(CancelFriendRequestReq) returns (google.protobuf.Empty);

  rpc SSO(SSOReq) returns (SSORes) {
    // Performs Discourse SSO
  }

  rpc Search(SearchReq) returns (SearchRes) {
    // Search for user names and usernames (for now)
  }
  
  rpc ListMessageThreads(ListMessageThreadsReq) returns (ListMessageThreadsRes) {
    // Gives a paginated list of message threads with previews
  }
  
  rpc GetMessageThread(GetMessageThreadReq) returns (GetMessageThreadRes);
  
  rpc GetMessageThreadInfo(GetMessageThreadInfoReq) returns (GetMessageThreadInfoRes);
  
  rpc CreateMessageThread(CreateMessageThreadReq) returns (CreateMessageThreadRes);
  
  rpc EditMessageThread(EditMessageThreadReq) returns (google.protobuf.Empty);
  
  rpc MakeMessageThreadAdmin(ThreadUserReq) returns (google.protobuf.Empty);
  
  rpc RemoveMessageThreadAdmin(ThreadUserReq) returns (google.protobuf.Empty);
  
  rpc SendMessage(SendMessageReq) returns (google.protobuf.Empty);
  
  rpc LeaveMessageThread(LeaveThreadReq) returns (google.protobuf.Empty);
  
  rpc InviteToMessageThread(ThreadUserReq) returns (google.protobuf.Empty);
  
  rpc RemoveFromMessageThread(ThreadUserReq) returns (google.protobuf.Empty);
  
  rpc SearchMessages(SearchMessagesReq) returns (SearchMessagesRes);
}

message SearchReq {
  string query = 1;
}

message SearchRes {
  repeated User users = 1;
}

message SendFriendRequestReq {
  string user = 1;
}

message FriendRequest {
  int64 friend_request_id = 1;

  enum FriendRequestStatus {
    // these are the only two states that a user will see
    PENDING = 0;
    ACCEPTED = 1;
  }

  FriendRequestStatus state = 2;

  string user = 3;
}

message RespondFriendRequestReq {
  int64 friend_request_id = 1;

  bool accept = 2;
}

message CancelFriendRequestReq {
  int64 friend_request_id = 1;
}

message ListFriendRequestsRes {
  repeated FriendRequest sent = 1;
  repeated FriendRequest received = 2;
}

message ListFriendsRes {
  repeated string users = 1;
}

message PingReq {}

message PingRes {
  // Basic info about user
  int64 user_id = 1;
  string username = 2;
  string name = 3;
  string color = 4;
}

message User {
  enum FriendshipStatus {
    NOT_FRIENDS = 0;
    FRIENDS = 1;
    PENDING = 2;
    NA = 3; // not applicable, e.g. user requesting is self
  }

  string username = 1;
  string name = 2;
  string city = 3;
  double verification = 4;
  double community_standing = 5;
  uint32 num_references = 6;
  string gender = 7;
  uint32 age = 8;
  string color = 9; // web color, e.g. #643073, case doesn't matter
  google.protobuf.Timestamp joined = 10; // not exact
  google.protobuf.Timestamp last_active = 11; // not exact
  string occupation = 12;
  string about_me = 13;
  string about_place = 14;
  repeated string languages = 15;
  repeated string countries_visited = 16;
  repeated string countries_lived = 17;

  FriendshipStatus friends = 18;
}

message GetUserReq {
  string user = 1;
}

message RepeatedStringValue {
  // A RepeatedStringValue is like a "protobuf warpper" (like {Type}Value) but for repeated strings
  // allows us to determine if the user wanted to remote this list of strings
  bool exists = 1;
  repeated string value = 2;
}

message UpdateProfileReq {
  // These StringValue types allow us to determine if the value is absent versus ""

  google.protobuf.StringValue name = 1;
  google.protobuf.StringValue city = 2;
  google.protobuf.StringValue gender = 3;
  google.protobuf.StringValue occupation = 4;
  google.protobuf.StringValue about_me = 5;
  google.protobuf.StringValue about_place = 6;
  google.protobuf.StringValue color = 7;

  RepeatedStringValue languages = 8;
  RepeatedStringValue countries_visited = 9;
  RepeatedStringValue countries_lived = 10;
}

message UpdateProfileRes {
  bool updated_name = 1;
  bool updated_city = 2;
  bool updated_gender = 3;
  bool updated_occupation = 4;
  bool updated_about_me = 5;
  bool updated_about_place = 6;
  bool updated_color = 7;
  bool updated_languages = 8;
  bool updated_countries_visited = 9;
  bool updated_countries_lived = 10;
}

message SSOReq {
  // just raw query strings from discourse
  string sso = 1;
  string sig = 2;
}

message SSORes {
  string redirect_url = 1;
}

message MessageThreadPreview {
  int64 thread_id = 1;
  string title = 2;
  repeated string recipients = 3;
  bool is_dm = 4;
  google.protobuf.Timestamp creation_time = 5;
  string latest_message_preview = 6;
  string latest_message_sender = 7;
  google.protobuf.Timestamp latest_message_time = 8;
}

message ListMessageThreadsReq {
  uint32 start_index = 1;
  uint32 max = 2;
}

message ListMessageThreadsRes {
  uint32 start_index = 1;
  repeated MessageThreadPreview threads = 2;
  bool has_more = 3;
}

message Message {
  int64 id = 1;
  string sender = 2;
  google.protobuf.Timestamp timestamp = 3;
  string text = 4;
}

message GetMessageThreadReq {
  int64 thread_id = 1;
  uint32 start_index = 2;
  uint32 max = 3;
}

message GetMessageThreadRes {
  uint32 start_index = 1;
  repeated Message messages = 2;
  bool has_more = 3;
}

message GetMessageThreadInfoReq {
  uint32 thread_id = 1;
}

message GetMessageThreadInfoRes {
  string title = 1;
  repeated string recipients = 2;
  google.protobuf.Timestamp creation_time = 3;
  bool only_admins_invite = 4
}

message CreateMessageThreadReq {
  google.protobuf.StringValue title = 1;
  repeated string recipients = 2;
  bool is_dm = 3;
}

message CreateMessageThreadRes {
  int64 thread_id = 1;
}

message EditMessageThreadReq {
  int64 thread_id = 1;
  google.protobuf.StringValue title = 2;
  bool only_admins_invite = 3;
}

message ThreadUserReq {
  int64 thread_id = 1;
  int64 user_id = 2;
}
  
message SendMessageReq {
  int64 thread_id = 1;
  string message = 2;
}

message LeaveThreadReq {
  int64 thread_id = 1;
}

message SearchMessagesReq {
  string query = 1;
}

message MessageSearchResult {
  int64 thread_id = 1;
  int64 message_id = 2;
}

message SearchMessagesRes {
  repeated MessageSearchResult results = 1;
}
