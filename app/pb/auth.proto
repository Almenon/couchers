syntax = "proto3";

package auth;

message LoginRequest {
  string username = 1;
}

message LoginResponse {
  enum LoginStep {
    NEED_PASSWORD = 0;
    SENT_LOGIN_EMAIL = 1;
    LOGIN_NO_SUCH_USER = 3;
  }

  LoginStep next_step = 1;
}

message SignupRequest {
  string email = 1;
}

message SignupResponse {
  enum SignupStep {
    SENT_SIGNUP_EMAIL = 0;
    EMAIL_EXISTS = 1;
    INVALID_EMAIL = 2;
  }

  SignupStep next_step = 1;
}

message CompleteTokenLoginReq {
  string token = 1;
}

message UsernameValidReq {
  string username = 1;
}

message UsernameValidRes {
  bool valid = 1;
}

message SignupTokenInfoReq {
  string token = 1;
}

message SignupTokenInfoRes {
  string email = 1;
}

message CompleteSignupReq {
  string token = 1;

  string name = 2;
  string hometown = 3;
  string birthdate = 4;
  string gender = 5;
}

message AuthRequest {
  string username = 1;
  string password = 2;
}

message AuthResponse {
  string token = 1;
}

message DeauthRequest {
  string token = 1;
}

message DeauthResponse {}

service Auth {
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc Signup(SignupRequest) returns (SignupResponse);

  rpc CompleteTokenLogin(CompleteTokenLoginReq) returns (AuthResponse) {
    // Complete a login after receiving an email with a login token
  }

  rpc UsernameValid(UsernameValidReq) returns (UsernameValidRes) {
    // Check whether the username is valid
  }

  rpc SignupTokenInfo(SignupTokenInfoReq) returns (SignupTokenInfoRes) {
    // returns info about a signup token
  }

  rpc CompleteSignup(CompleteSignupReq) returns (AuthResponse) {
    // Complete the signup form
  }

  rpc Authenticate(AuthRequest) returns (AuthResponse);
  rpc Deauthenticate(DeauthRequest) returns (DeauthResponse);
}
